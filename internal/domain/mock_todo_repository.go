// Code generated by mockery v2.42.1. DO NOT EDIT.

package domain

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockTodoRepository is an autogenerated mock type for the TodoRepository type
type MockTodoRepository struct {
	mock.Mock
}

type MockTodoRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoRepository) EXPECT() *MockTodoRepository_Expecter {
	return &MockTodoRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: description
func (_m *MockTodoRepository) Add(description string) *Todo {
	ret := _m.Called(description)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 *Todo
	if rf, ok := ret.Get(0).(func(string) *Todo); ok {
		r0 = rf(description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Todo)
		}
	}

	return r0
}

// MockTodoRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockTodoRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - description string
func (_e *MockTodoRepository_Expecter) Add(description interface{}) *MockTodoRepository_Add_Call {
	return &MockTodoRepository_Add_Call{Call: _e.mock.On("Add", description)}
}

func (_c *MockTodoRepository_Add_Call) Run(run func(description string)) *MockTodoRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTodoRepository_Add_Call) Return(_a0 *Todo) *MockTodoRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Add_Call) RunAndReturn(run func(string) *Todo) *MockTodoRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// All provides a mock function with given fields:
func (_m *MockTodoRepository) All() []*Todo {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []*Todo
	if rf, ok := ret.Get(0).(func() []*Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Todo)
		}
	}

	return r0
}

// MockTodoRepository_All_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'All'
type MockTodoRepository_All_Call struct {
	*mock.Call
}

// All is a helper method to define mock.On call
func (_e *MockTodoRepository_Expecter) All() *MockTodoRepository_All_Call {
	return &MockTodoRepository_All_Call{Call: _e.mock.On("All")}
}

func (_c *MockTodoRepository_All_Call) Run(run func()) *MockTodoRepository_All_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTodoRepository_All_Call) Return(_a0 []*Todo) *MockTodoRepository_All_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_All_Call) RunAndReturn(run func() []*Todo) *MockTodoRepository_All_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockTodoRepository) Get(id uuid.UUID) *Todo {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Todo
	if rf, ok := ret.Get(0).(func(uuid.UUID) *Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Todo)
		}
	}

	return r0
}

// MockTodoRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTodoRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTodoRepository_Expecter) Get(id interface{}) *MockTodoRepository_Get_Call {
	return &MockTodoRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockTodoRepository_Get_Call) Run(run func(id uuid.UUID)) *MockTodoRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTodoRepository_Get_Call) Return(_a0 *Todo) *MockTodoRepository_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Get_Call) RunAndReturn(run func(uuid.UUID) *Todo) *MockTodoRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: id
func (_m *MockTodoRepository) Remove(id uuid.UUID) {
	_m.Called(id)
}

// MockTodoRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockTodoRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockTodoRepository_Expecter) Remove(id interface{}) *MockTodoRepository_Remove_Call {
	return &MockTodoRepository_Remove_Call{Call: _e.mock.On("Remove", id)}
}

func (_c *MockTodoRepository_Remove_Call) Run(run func(id uuid.UUID)) *MockTodoRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockTodoRepository_Remove_Call) Return() *MockTodoRepository_Remove_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTodoRepository_Remove_Call) RunAndReturn(run func(uuid.UUID)) *MockTodoRepository_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Reorder provides a mock function with given fields: ids
func (_m *MockTodoRepository) Reorder(ids []uuid.UUID) []*Todo {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for Reorder")
	}

	var r0 []*Todo
	if rf, ok := ret.Get(0).(func([]uuid.UUID) []*Todo); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Todo)
		}
	}

	return r0
}

// MockTodoRepository_Reorder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reorder'
type MockTodoRepository_Reorder_Call struct {
	*mock.Call
}

// Reorder is a helper method to define mock.On call
//   - ids []uuid.UUID
func (_e *MockTodoRepository_Expecter) Reorder(ids interface{}) *MockTodoRepository_Reorder_Call {
	return &MockTodoRepository_Reorder_Call{Call: _e.mock.On("Reorder", ids)}
}

func (_c *MockTodoRepository_Reorder_Call) Run(run func(ids []uuid.UUID)) *MockTodoRepository_Reorder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uuid.UUID))
	})
	return _c
}

func (_c *MockTodoRepository_Reorder_Call) Return(_a0 []*Todo) *MockTodoRepository_Reorder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Reorder_Call) RunAndReturn(run func([]uuid.UUID) []*Todo) *MockTodoRepository_Reorder_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: search
func (_m *MockTodoRepository) Search(search string) []*Todo {
	ret := _m.Called(search)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*Todo
	if rf, ok := ret.Get(0).(func(string) []*Todo); ok {
		r0 = rf(search)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Todo)
		}
	}

	return r0
}

// MockTodoRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockTodoRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - search string
func (_e *MockTodoRepository_Expecter) Search(search interface{}) *MockTodoRepository_Search_Call {
	return &MockTodoRepository_Search_Call{Call: _e.mock.On("Search", search)}
}

func (_c *MockTodoRepository_Search_Call) Run(run func(search string)) *MockTodoRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTodoRepository_Search_Call) Return(_a0 []*Todo) *MockTodoRepository_Search_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Search_Call) RunAndReturn(run func(string) []*Todo) *MockTodoRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, completed, description
func (_m *MockTodoRepository) Update(id uuid.UUID, completed bool, description string) *Todo {
	ret := _m.Called(id, completed, description)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Todo
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool, string) *Todo); ok {
		r0 = rf(id, completed, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Todo)
		}
	}

	return r0
}

// MockTodoRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTodoRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id uuid.UUID
//   - completed bool
//   - description string
func (_e *MockTodoRepository_Expecter) Update(id interface{}, completed interface{}, description interface{}) *MockTodoRepository_Update_Call {
	return &MockTodoRepository_Update_Call{Call: _e.mock.On("Update", id, completed, description)}
}

func (_c *MockTodoRepository_Update_Call) Run(run func(id uuid.UUID, completed bool, description string)) *MockTodoRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(bool), args[2].(string))
	})
	return _c
}

func (_c *MockTodoRepository_Update_Call) Return(_a0 *Todo) *MockTodoRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTodoRepository_Update_Call) RunAndReturn(run func(uuid.UUID, bool, string) *Todo) *MockTodoRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTodoRepository creates a new instance of MockTodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoRepository {
	mock := &MockTodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
